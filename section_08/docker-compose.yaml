version: "3.8"

services: 
  server:
    # image: 'nginx:stable-alpine'
    build:
      context: .
      dockerfile: dockerfiles/nginx.dockerfile
    ports: 
      - '8000:80'
    volumes: 
      - ./src:/var/www/html
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on: 
      - php
      - mysql
  php:
    build:
      context: .
      dockerfile: dockerfiles/php.dockerfile
    volumes: 
      - ./src:/var/www/html:delegated
  mysql:
    image: mysql:5.7
    env_file: 
      - ./env/mysql.env
  composer:
    build:
      context: ./dockerfiles
      dockerfile: composer.dockerfile
    volumes: 
      - ./src:/var/www/html
  artisan:
    build:
      context: .
      dockerfile: dockerfiles/php.dockerfile
    volumes: 
      - ./src:/var/www/html
    entrypoint: ["php", "/var/www/html/artisan"]
  npm:
    image: node:14
    working_dir: /var/www/html
    entrypoint: ["npm"]
    volumes: 
      - ./src:/var/www/html








# version: '3.8'

# services:

# # First we have the application containers :-

# # The nginx server, will take all the incoming requests, and trigger the PHP interpretter
#   server:
#     image: 'nginx:stable-alpine'
#     ports:
#       - '8000:80'
#     volumes:
#       - "./src:/var/www/html"
#       - "./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro"
#     depends_on:
#       - php
#       - mysql

# # Responsible for running and executing our PHP code, therefore also our Laravel Code
# # (Laravel is just a PHP framework)
#   php:
#     build:
#       context: ./dockerfiles
#       dockerfile: php.dockerfile
#     volumes:
#       - "./src:/var/www/html:delegated"
# # delegated: it means that if the container should write some data there, it's not instantly
# # reflected back on the host machine. Instead, it's basically processed in patches, you could
# # say. So, the performance in much better. So, it's just some optimization here.
#     # ports:
#     #   - '3000:9000'
# # Now, we only need to do this, when we need to expose the port 9000 of the php container,
# # to the localhost. But, since we won't be doing that, and this php container will only contact
# # other containers inside the same network, we don't need to expose any ports here

# # Holds the mySQL database
#   mysql:
#     image: mysql:5.7
#     env_file:
#       - ./env/mysql.env

# # Now, we have the utility containers :-

#   composer:
#     build:
#       context: ./dockerfiles
#       dockerfile: composer.dockerfile
#     volumes:
#       - "./src:/var/www/html"

#   artisan:
#     build:
#       context: ./dockerfiles
#       dockerfile: composer.dockerfile
#     volumes:
#       - ./src:/var/www/html
#     entrypoint: ['php', '/var/www/html/artisan']

#   npm:
#     image: node:14
#     working_dir: /var/www/html
#     entrypoint: ['npm']
#     volumes:
#       - ./src:/var/www/html